<label
  class="navigation-item swap swap-rotate lg:absolute lg:bottom-8"
  aria-label="亮/暗色模式切换"
  title="亮/暗色模式"
>
  <!-- this hidden checkbox controls the state -->
  <input id="theme-toggle" type="checkbox" class="theme-controller" />

  <!-- sun icon -->

  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    class="lucide lucide-sun-icon lucide-sun swap-off icon-style h-7 w-7 lg:h-9 lg:w-9"
    ><circle cx="12" cy="12" r="4"></circle><path d="M12 2v2"></path><path
      d="M12 20v2"></path><path d="m4.93 4.93 1.41 1.41"></path><path
      d="m17.66 17.66 1.41 1.41"></path><path d="M2 12h2"></path><path
      d="M20 12h2"></path><path d="m6.34 17.66-1.41 1.41"></path><path
      d="m19.07 4.93-1.41 1.41"></path></svg
  >

  <!-- moon icon -->
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    class="lucide lucide-moon-icon lucide-moon icon-style swap-on"
    ><path
      d="M20.985 12.486a9 9 0 1 1-9.473-9.472c.405-.022.617.46.402.803a6 6 0 0 0 8.268 8.268c.344-.215.825-.004.803.401"
    ></path></svg
  >
</label>

<script>
  /**
   * 设置并应用主题。
   * @param {'light' | 'dark' | 'system'} theme - 要应用的主题。
   */
  function setTheme(theme: string) {
    let themeToApply = theme;
    // 如果是 system，则根据系统偏好设置
    if (theme === "system") {
      themeToApply = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }

    // 设置 data-theme 属性以应用样式
    document.documentElement.setAttribute("data-theme", themeToApply);
    // 保存用户的选择 (light, dark, or system)
    localStorage.setItem("theme", theme);

    // 同步 checkbox 的状态
    const themeToggle = document.getElementById(
      "theme-toggle",
    ) as HTMLInputElement;
    if (themeToggle) {
      themeToggle.checked = themeToApply === "dark";
    }
  }

  /**
   * 初始化主题切换器功能。
   * 这包括从 localStorage 加载主题并为按钮添加事件监听器。
   */
  function initializeThemeToggle() {
    const savedTheme = localStorage.getItem("theme") || "system";
    setTheme(savedTheme);

    const themeToggle = document.getElementById("theme-toggle");
    if (themeToggle) {
      themeToggle.addEventListener("change", (event) => {
        const isChecked = (event.currentTarget as HTMLInputElement).checked;
        setTheme(isChecked ? "dark" : "light");
      });
    }
  }

  // 首次加载时初始化
  initializeThemeToggle();

  // 在 Astro 视图转换后重新初始化
  document.addEventListener("astro:after-swap", initializeThemeToggle);
</script>
